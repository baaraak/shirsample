// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Sample {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  title       String?    @db.VarChar(100)
  description String?    @db.VarChar(255)
  genre       String?
  url         String
  duration    String
  language    String?    @db.Char(2)
  closed      Boolean    @default(false)
  proposals   Proposal[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map(name: "samples")
}

model Proposal {
  id          Int      @id @default(autoincrement())
  sample      Sample   @relation(fields: [sampleId], references: [id])
  sampleId    String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  artist_name String   @db.VarChar(100)
  song_title  String   @db.VarChar(100)
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "proposals")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String   @db.VarChar(255)
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  sample    Sample   @relation(fields: [sampleId], references: [id])
  sampleId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "comments")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  bio           String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  Sample        Sample[]
  Proposal      Proposal[]
  Comment       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
