// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  username      String?   @unique @db.VarChar(100)
  password      String?   @db.VarChar(100)
  bio           String?   @db.VarChar(255)
  name          String?
  image         String?
  avatar        String?   @db.VarChar(100)
  samples       Sample[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map(name: "users")
}

model Sample {
  id          Int        @id @default(autoincrement())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  title       String?    @db.VarChar(100)
  description String?    @db.VarChar(255)
  genre       String?
  language    String?    @db.Char(2)
  closed      Boolean    @default(false)
  proposals   Proposal[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map(name: "samples")
}

model Proposal {
  id          Int      @id @default(autoincrement())
  sample      Sample   @relation(fields: [sampleId], references: [id])
  sampleId    Int
  artist_name String   @db.VarChar(100)
  song_title  String   @db.VarChar(100)
  accepted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map(name: "proposals")
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String   @db.VarChar(255)
  sample    Sample   @relation(fields: [sampleId], references: [id])
  sampleId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "comments")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}
